// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  name           String?
  userName       String?   @unique
  pronouns       String?
  aboutMe        String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  phoneNumber    String?   @unique
  disable        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts    Account[]
  servers     Server[]
  members     Member[]
  channels    Channel[]
  bannerColor BannerColor?
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Server {
  id         String @id @default(uuid()) @db.Uuid
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid()) @db.Uuid
  role MemberRole @default(GUEST)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String @db.Uuid
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid()) @db.Uuid
  name String
  type ChannelType @default(TEXT)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String @db.Uuid
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid()) @db.Uuid
  content String @db.Text

  fileUrl String? @db.Text

  memberId String @db.Uuid
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.Uuid
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid()) @db.Uuid

  memberOneId String @db.Uuid
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.Uuid
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])
  @@index([memberOneId, memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid()) @db.Uuid
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String @db.Uuid
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String       @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model BannerColor {
  id      String   @id @default(uuid()) @db.Uuid
  colorId String[]

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
